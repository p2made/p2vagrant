#!/bin/zsh

# vg
# Updated: 2024-02-12

# Generates Vagrantfile for the step specified by an integer argument.

# Machine Variables
VM_HOSTNAME="p2vagrant"
VM_IP="192.168.22.42"                   # 22 = titanium, 42 = Douglas Adams's number
TIMEZONE="Australia/Brisbane"           # "Europe/London"
MEMORY=4096
CPUS=1

# Synced Folders
HOST_FOLDER="."
REMOTE_FOLDER="/var/www"

# Software Versions
PHP_VERSION="8.3"
MYSQL_VERSION="8.3"
SWIFT_VERSION="5.9.2"                   # For installing Swift (optional)

# Database Variables
ROOT_PASSWORD="RootPassw0rd"
DB_USERNAME="fredspotty"
DB_PASSWORD="Passw0rd"
DB_NAME="example_db"
DB_NAME_TEST="example_db_test"

# Vagrantfile data...
data_file="./provision/data/vagrant_data"

# Argument...
vm_step=$1

# Script variables...
step_title=""

# Sparse array of provisioning script calls, indexed by setup step...
provisioning_indexes=(2 3 5 6 7 8 10)
provisioning_items[2]='	config.vm.provision :shell, path: "provision/scripts/upgrade_vm.sh", args: [TIMEZONE]'
provisioning_items[3]='	config.vm.provision :shell, path: "provision/scripts/install_utilities.sh"'
provisioning_items[5]='	config.vm.provision :shell, path: "provision/scripts/install_swift.fish", args: [SWIFT_VERSION]'
provisioning_items[6]='	config.vm.provision :shell, path: "provision/scripts/install_apache.fish", args: [VM_HOSTNAME, VM_IP]'
provisioning_items[7]='	config.vm.provision :shell, path: "provision/scripts/install_php.fish", args: [PHP_VERSION]'
provisioning_items[8]='	config.vm.provision :shell, path: "provision/scripts/install_mysql.fish", args: [MYSQL_VERSION, PHP_VERSION, ROOT_PASSWORD, DB_USERNAME, DB_PASSWORD, DB_NAME, DB_NAME_TEST]'
provisioning_items[10]='	config.vm.provision :shell, path: "provision/scripts/configure_sites.fish"'

# -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- #

# Function for error handling
# Usage: handle_error "Error message"
handle_error() {
	echo "‚ö†Ô∏è Error: $1 üí•"
	exit 1
}

# Function to announce success
# Usage: announce_success "Task completed successfully." [use_alternate_icon]
announce_success() {
	icon="‚úÖ"

	if [ -n "$2" ] && [ "$2" -eq 1 ]; then
		icon="üëç"
	fi

	echo "$icon $1"
}

# -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- #

# Function to read and parse the data file
# Usage: read_and_parse_data $vm_step $data_file
read_and_parse_data() {
	local vm_step=$1
	local file_temp=$2

	while IFS= read -r one_line; do
		# Skip lines starting with #
		[[ "$one_line" =~ ^# ]] && continue

		split_line=(${(s:|:)one_line})  # Split the line by |

		if [[ "${split_line[1]}" -eq "$vm_step" ]]; then
			step_title="${split_line[2]}"
			announce_success "Generating Vagrantfile for $vm_step: $step_title."
			return 0  # Valid step found in the data file
		fi
	done < "$file_temp"

	handle_error "Step not found in the data file"
}

# Function to set the Vagrantfile header
# Usage: set_header_lines $vm_step $step_title
function write_header_lines () {
	local i=$(printf "%02d" $1)
	local title=$2

	# Write the Vagrantfile header
	cat "# -*- mode: ruby -*-" > ./Vagrantfile
	cat "# vi: set ft=ruby" >> ./Vagrantfile
	cat "" >> ./Vagrantfile
	cat "# $i $title" >> ./Vagrantfile
	cat "# Generated: $(date "+%Y-%m-%d")" >> ./Vagrantfile
	cat "" >> ./Vagrantfile
	cat "# Machine Variables" >> ./Vagrantfile
	cat "VM_HOSTNAME         = \"$VM_HOSTNAME\"" >> ./Vagrantfile
	cat "VM_IP               = \"$VM_IP\"" >> ./Vagrantfile
	cat "TIMEZONE            = \"$TIMEZONE\"" >> ./Vagrantfile
	cat "MEMORY              = $MEMORY" >> ./Vagrantfile
	cat "CPUS                = $CPUS" >> ./Vagrantfile
}

# Function to set the Vagrantfile variable lines
# Usage: set_variables_lines $vm_step
function write_variables_lines () {
	local vm_step=$1

	cat "" >> ./Vagrantfile
	cat "# Synced Folders" >> ./Vagrantfile
	cat "HOST_FOLDER         = \"$HOST_FOLDER\"" >> ./Vagrantfile
	cat "REMOTE_FOLDER       = \"$REMOTE_FOLDER\"" >> ./Vagrantfile

	if (( vm_step >= 5 )); then
		cat "" >> ./Vagrantfile
		cat "# Software Versions" >> ./Vagrantfile
		cat "SWIFT_VERSION       = \"$SWIFT_VERSION\"" >> ./Vagrantfile
	fi
	if (( vm_step >= 7 )); then
		cat "PHP_VERSION         = \"$PHP_VERSION\"" >> ./Vagrantfile
	fi
	if (( vm_step >= 8 )); then
		cat "MYSQL_VERSION       = \"$MYSQL_VERSION\"" >> ./Vagrantfile
	fi
	if (( vm_step >= 7 )); then
		cat "" >> ./Vagrantfile
		cat "# Database Variables" >> ./Vagrantfile
		cat "ROOT_PASSWORD       = \"$ROOT_PASSWORD\"" >> ./Vagrantfile
		cat "DB_USERNAME         = \"$DB_USERNAME\"" >> ./Vagrantfile
		cat "DB_PASSWORD         = \"$DB_PASSWORD\"" >> ./Vagrantfile
		cat "DB_NAME             = \"$DB_NAME\"" >> ./Vagrantfile
		cat "DB_NAME_TEST        = \"$DB_NAME_TEST\"" >> ./Vagrantfile
	fi
}

# Function to set VM config opening lines
# Usage: set_config_opening_lines
function write_config_opening_lines () {
	cat "" >> ./Vagrantfile
	cat "Vagrant.configure(\"2\") do |config|" >> ./Vagrantfile
	cat "" >> ./Vagrantfile
	cat "	config.vm.box = \"bento/ubuntu-20.04-arm64\"" >> ./Vagrantfile
	cat "" >> ./Vagrantfile
	cat "	config.vm.provider \"vmware_desktop\" do |v|" >> ./Vagrantfile
	cat "		v.memory    = MEMORY" >> ./Vagrantfile
	cat "		v.cpus      = CPUS" >> ./Vagrantfile
	cat "		v.gui       = true" >> ./Vagrantfile
	cat "	end" >> ./Vagrantfile
	cat "" >> ./Vagrantfile
	cat "	# Configure network..." >> ./Vagrantfile
	cat "	config.vm.network \"private_network\", ip: VM_IP" >> ./Vagrantfile
	cat "" >> ./Vagrantfile
	cat "	# Set a synced folder..." >> ./Vagrantfile
	cat "	config.vm.synced_folder HOST_FOLDER, REMOTE_FOLDER, create: true, nfs: true, mount_options: [\"actimeo=2\"]" >> ./Vagrantfile
}

# Function to set VM config provisioning lines
# Usage: set_provisioning_lines $vm_step
function write_provisioning_lines () {
	local vm_step=$1

	if (( vm_step >= 4 )); then
		cat "" >> ./Vagrantfile
		cat "	# Upgrade check..." >> ./Vagrantfile
		cat '	config.vm.provision :shell, path: "provision/scripts/upgrade_vm.fish", args: [VM_HOSTNAME], run: "always"' >> ./Vagrantfile
	fi

	if (( vm_step >= 2 )); then
		cat "" >> ./Vagrantfile
		cat "	# Provisioning..." >> ./Vagrantfile

		# Loop through keys of the associative array in sorted order
		for prov_step in "${provisioning_indexes[@]}"; do
			prov_string=$provisioning_items[$prov_step]
			if (( $vm_step <= $prov_step )); then
				if (( $vm_step == $prov_step )); then
					cat "$prov_string" >> ./Vagrantfile
				fi
				return
			fi
			cat "#$prov_string" >> ./Vagrantfile
		done
	fi
}

# Function to set VM config closing lines
# Usage: set_config_closing_lines
function write_config_closing_lines () {
	cat "" >> ./Vagrantfile
	cat "end" >> ./Vagrantfile
}

# -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- #

read_and_parse_data $vm_step $data_file

write_header_lines $vm_step $step_title
write_variables_lines $vm_step
write_config_opening_lines
write_provisioning_lines $vm_step
write_config_closing_lines
