#!/bin/zsh

# vm
# Updated: 2024-02-16

# Generates Vagrantfile for the step specified by an integer argument.
# &/or deletes previously generated & copied files
# For usage run `./vm`

# Common functions
source ./provision/vm/vm_common.sh

# Source data
source ./provision/data/vm_data.sh

# Script constants
FLAGS="g:r:v"

# Define flags
FLAG_GENERATE=false
FLAG_RESET=false
FLAG_VAGRANT=false

# Script variables
provisioning_step=0

# -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- #

# Function to process flags
# Usage: process_flags [$FLAGS]
function process_flags() {
	# Use globals
	# FLAGS="g:r:v"
	# FLAG_GENERATE=false
	# FLAG_RESET=false
	# FLAG_VAGRANT=false

	# Process flags
	while getopts ":$FLAGS" opt; do
		debug_message "Processing options"
		case $opt in
			g)
				FLAG_GENERATE=true
				;;
			r)
				FLAG_RESET=true
				;;
			v)
				FLAG_VAGRANT=true
				;;
			\?)
				handle_error "Invalid option: -$OPTARG"
				;;
			:)
				if [ ${#OPTARG} -eq 0 ]; then
				    handle_error "Option -$opt requires an argument"
				else
				    handle_error "Invalid option: -$opt"
				fi
				;;
		esac
	done

	# Check if there were no options
	if (( $OPTIND == 1 )); then
		# Set default behavior or handle as needed
		FLAG_GENERATE=true
	fi
}

# Function to check vagrant conditions
# Usage: vagrant_check $requires_vagrantfile $provisioning_step
function vagrant_check() {
}

# Function to evaluate the argument
# Usage: evaluate_argument $argument
function evaluate_argument() {
	local argument=$1

	if (( ${#1} == 0 )); then
		argument=0
	fi

	# Check if the argument is an integer
	if ! [[ $argument =~ ^[0-9]*$ ]]; then
		handle_error "$argument is not a valid integer"
	fi

	# Check is argument is out of range
	if (( $argument > $VAGRANTFILES_INDEXES[-1] )); then
		handle_error "$argument is out of range"
	fi

	# Now argument is valid for `-r` at minimum
	provisioning_step=$argument

	# Check whether a Vagrantfile is needed for this step
	if ! [[ "${VAGRANTFILES_INDEXES[@]}" =~ "${provisioning_step}" ]]; then
		requires_vagrantfile=true
	fi
}

function vagrant_manager() {
	# Check if there are no flags or arguments
	# If none, display usage. Otherwise run script, starting with banner
	if (( "$#" == 0 )); then
		cat ./provision/vm/usage
		exit 0
	fi

	show_manager_banner

	# Set variables up
	declare passed_step
	declare step_vagrantfile
	requires_vagrantfile=false
	current_vagrantfile=0

	process_flags

	# Shift to the next argument after processing flags
	shift $(( OPTIND - 1 ))

	# If we have come past the previous check, we have an argument to evaluate.
	evaluate_argument "$1"

	# if only `-g` is set
	if (( $FLAG_GENERATE )) && ! (( $FLAG_RESET )) && ! (( $FLAG_VAGRANT )); then
		if ! (( $requires_vagrantfile )); then
			handle_error "No Vagrantfile needs to be generated for step $vm_step"
		fi

		step_vagrantfile=$provisioning_step

		# generate_action $step_vagrantfile
		exit 0
	fi

	# if only `-v` is set
	if (( $FLAG_VAGRANT )) && ! (( $FLAG_GENERATE )) && ! (( $FLAG_RESET )); then
		if ! (( $requires_vagrantfile )); then
			handle_error "No Vagrantfile needs to be generated for step $vm_step"
		fi

		# vagrant_action $provisioning_step
		exit 0
	fi

	# if `-r` is set
	if $FLAG_RESET; then
		reset_action
	fi

	# if `-g` is set
	if $FLAG_GENERATE; then
		generate_action
	fi

	# if `-r` is set
	if $FLAG_VAGRANT; then
		vagrant_action
	fi
}

vagrant_manager "$@"

# -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- #

#!/bin/zsh

# If -r is set
if $FLAG_RESET; then
	# Calling vagrant_reset.sh
	echo "Dry run: Calling ./provision/scripts/vagrant_reset.sh $(pwd) $provisioning_step"
	echo "vagrant_reset.sh deletes all generated & copied files for provisioning step $provisioning_step"
	# ./provision/scripts/vagrant_reset.sh "$(pwd)" "$provisioning_step"

	announce_success "Reset complete. Generated & copied files have been deleted."

	if ! [[ "${VAGRANTFILES_INDEXES[@]}" =~ "${provisioning_step}" ]]; then
		# There is no Vagrantfile to be generated so we quietly exit
		exit 0
	fi
fi

# If -g is set
if $FLAG_GENERATE; then
	if ! [[ "${VAGRANTFILES_INDEXES[@]}" =~ "${provisioning_step}" ]]; then
		echo "No Vagrantfile to be generated for the specified step"
		exit 0
	fi

	# Calling vagrant_generate.sh
	#echo "Dry run: Calling ./provision/scripts/vagrant_generate.sh $(pwd) $provisioning_step"
	#echo "vagrant_generate.sh generates the Vagrantfile for provisioning step $provisioning_step"
	./provision/scripts/vagrant_generate.sh "$(pwd)" "$provisioning_step"

	announce_success "Vagrantfile for provisioning step $provisioning_step has been generated."
fi
