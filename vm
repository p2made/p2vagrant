#!/bin/zsh

# vm
# Updated: 2024-02-16

# Generates Vagrantfile for the step specified by an integer argument.
# &/or deletes previously generated & copied files

# Source data
source ./provision/data/vagrantfiles_data.sh

# Define flags
FLAG_GENERATE=false
FLAG_RESET=false

# Script variables
vm_step=0
step_title=""

# -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- #
# -- -- /%/ -- -- /%/ -- -- /%/     Utility Functions     /%/ -- -- /%/ -- -- /%/ -- -- #
# -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- #

# Function for error handling
# Usage: handle_error "Error message"
handle_error() {
	echo "‚ö†Ô∏è  Error: $1 üí•"
	exit 1
}

# Function to announce success
# Usage: announce_success "Task completed successfully." [use_alternate_icon]
announce_success() {
	icon="‚úÖ"

	if [ -n "$2" ] && [ "$2" -eq 1 ]; then
		icon="üëç"
	fi

	echo "$icon $1"
}

# Function to display usage information
display_usage() {
	script_name="$1"
	echo "Usage: $script_name [-g] [-r] <integer>"
	echo "Options:"
	echo "  -g    Generate Vagrantfile based on the specified integer."
	echo "  -r    Reset: Delete any generated or copied files from earlier Vagrant provisioning."
	echo "  <integer>   Step number for Vagrantfile generation."
	echo "--"
	echo "Usage examples:"
	echo "  $script_name -g <integer>    # Generate Vagrantfile based on the specified integer."
	echo "  $script_name -r              # Reset: Delete any generated or copied files from earlier Vagrant provisioning."
	echo "  $script_name -r <integer>    # Reset and generate Vagrantfile based on the specified integer."
	echo "  $script_name -gr <integer>   # Reset and generate Vagrantfile based on the specified integer."
	exit 0
}

# -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- #
# -- -- /%/ -- -- /%/ -- -- /%/        Reset Logic        /%/ -- -- /%/ -- -- /%/ -- -- #
# -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- #

# Function to display a map of files to be deleted
display_reset_map() {
	echo "Files to be deleted:"

	if [ $vm_step -le 5 ]; then
		# Largest set
		# Add files to the set that match the condition
		files_to_delete+=(
			"p2vagrant/html/*"
			"p2vagrant/provision/html/db.php"
			"p2vagrant/provision/html/index.htm"
			"p2vagrant/provision/html/index.md"
			"p2vagrant/provision/html/index.php"
			"p2vagrant/provision/ssl/*.cert"
			"p2vagrant/provision/ssl/*.key"
			"p2vagrant/provision/vhosts/*.conf"
		)
	elif [ $vm_step -le 9 ]; then
		# SSL & vhosts files other than the VM hostname files
		files_to_delete+=(
			$(find p2vagrant/provision/ssl -maxdepth 1 -type f -name '*.cert' -not -name '*p2vagrant*')
			$(find p2vagrant/provision/ssl -maxdepth 1 -type f -name '*.key' -not -name '*p2vagrant*')
			$(find p2vagrant/provision/vhosts -maxdepth 1 -type f -name '*.conf' -not -name '*p2vagrant*' -not -name 'local.conf')
		)

		if [ $vm_step -le 8 ]; then
			# plus phpMyAdmin
			files_to_delete+=("p2vagrant/html/phpmyadmin")
		fi
	fi

	# Display the found files
	for file in "${files_to_delete[@]}"; do
		echo "$file"
	done
}

# Function to prompt for confirmation
confirm_reset() {
	declare -a files_to_delete

	display_reset_map

	read "?Warning: This will delete any generated or copied files. Are you sure? (y/n): " answer
	case $answer in
		[Yy]*)
			FLAG_RESET=true # we are here because FLAG_RESET is already set to true
			# Call a function to delete the files
			delete_files "${files_to_delete[@]}"
			;;
		*)
			FLAG_RESET=false # Setting this is redundant because we are exiting
			echo "Reset operation canceled."
			exit 0
			;;
	esac
}

# Function to delete files
# Usage delete_files $files_to_delete
delete_files() {
	# Implement the logic to delete files based on the array passed as an argument
	# For example, you can use 'rm' command
	rm -f "${@}"

	# Specific deletion for phpmyadmin folder if it exists
	if [ -d "p2vagrant/html/phpmyadmin" ]; then
		rm -rf "p2vagrant/html/phpmyadmin"
		echo "Deleted p2vagrant/html/phpmyadmin"
	fi
}

# -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- #
# -- -- /%/ -- -- /%/ -- -- /%/       Input Section       /%/ -- -- /%/ -- -- /%/ -- -- #
# -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- #

# Process flags
while getopts ":gr" opt; do
	case $opt in
		g)
			FLAG_GENERATE=true
			;;
		r)
			FLAG_RESET=true
			;;
		\?)
			handle_error "Invalid option: -$OPTARG"
			;;
		:)
			handle_error "Option -$OPTARG requires an argument"
			;;
	esac
done

# Shift to the next argument after processing flags
shift $((OPTIND - 1))

# Check if there are no flags or arguments
if [ "$#" -eq 0 ] && ! $FLAG_RESET && ! $FLAG_GENERATE; then
	display_usage "$0"
fi

# Check if an argument is provided
if [ $# -gt 0 ]; then
	# Check if the argument is an integer
	if [[ $1 =~ ^[0-9]+$ ]]; then
		vm_step=$1
	else
		handle_error "$vm_step is not an integer"
	fi
fi

# If -r is set
if $FLAG_RESET; then
	confirm_reset

	if [ "$vm_step" -eq 0 ]; then
		# Not generating a Vagrantfile
		exit 0
	fi
fi

# If -g is set
if $FLAG_GENERATE; then
	# Do 'FLAG_GENERATE' stuff
	# taking 'vm_step' into account
fi

# -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- #
# -- -- /%/ -- -- /%/ -- -- /%/      _section_label_      /%/ -- -- /%/ -- -- /%/ -- -- #
# -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- #

