#!/bin/zsh

# vm
# Updated: 2024-02-16

# Generates Vagrantfile for the step specified by an integer argument.
# &/or deletes previously generated & copied files

# Source data
source ./provision/data/vagrantfiles_data.sh

# Define flags
FLAG_GENERATE=false
FLAG_RESET=false

# Script variables
vm_step=0
step_title=""

# -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- #
# -- -- /%/ -- -- /%/ -- -- /%/     Utility Functions     /%/ -- -- /%/ -- -- /%/ -- -- #
# -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- #

# Function for error handling
# Usage: handle_error "Error message"
function handle_error() {
	echo "‚ö†Ô∏è  Error: $1 üí•"
	exit 1
}

# Function to announce success
# Usage: announce_success "Task completed successfully." [use_alternate_icon]
function announce_success() {
	icon="‚úÖ"

	if [ -n "$2" ] && [ "$2" -eq 1 ]; then
		icon="üëç"
	fi

	echo "$icon $1"
}

# Function to display usage information
function display_usage() {
	script_name="$1"
	echo "Usage: $script_name [-g] [-r] <integer>"
	echo "Options:"
	echo "  -g    Generate Vagrantfile based on the specified integer."
	echo "  -r    Reset: Delete any generated or copied files from earlier Vagrant provisioning."
	echo "  <integer>   Step number for Vagrantfile generation."
	echo "--"
	echo "Usage examples:"
	echo "  $script_name -g <integer>    # Generate Vagrantfile based on the specified integer."
	echo "  $script_name -r              # Reset: Delete any generated or copied files from earlier Vagrant provisioning."
	echo "  $script_name -r <integer>    # Reset and generate Vagrantfile based on the specified integer."
	echo "  $script_name -gr <integer>   # Reset and generate Vagrantfile based on the specified integer."
	exit 0
}

# -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- #
# -- -- /%/ -- -- /%/ -- -- /%/      Input Handling       /%/ -- -- /%/ -- -- /%/ -- -- #
# -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- #

# Process flags
while getopts ":gr" opt; do
	case $opt in
		g)
			FLAG_GENERATE=true
			;;
		r)
			FLAG_RESET=true
			;;
		\?)
			handle_error "Invalid option: -$OPTARG"
			;;
		:)
			handle_error "Option -$OPTARG requires an argument"
			;;
	esac
done

# Shift to the next argument after processing flags
shift $((OPTIND - 1))

# Check if there are no flags or arguments
if [ "$#" -eq 0 ] && ! $FLAG_RESET && ! $FLAG_GENERATE; then
	display_usage "$0"
fi

# Check if an argument is provided
if [ $# -gt 0 ]; then
	# Check if the argument is an integer
	if [[ $1 =~ ^[0-9]+$ ]]; then
		vm_step=$1
	else
		handle_error "$vm_step is not an integer"
	fi
fi

# If -r is set
if $FLAG_RESET; then
	# Calling vagrant_reset.sh
	echo "Dry run: Calling ./provision/scripts/vagrant_reset.sh $(pwd) $vm_step"
	# ./provision/scripts/vagrant_reset.sh "$(pwd)" "$vm_step"

	if [ "$vm_step" -eq 0 ]; then
		# Not generating a Vagrantfile
		exit 0
	fi
fi

# If -g is set
if $FLAG_GENERATE; then
	# Calling vagrant_generate.sh
	echo "Dry run: Calling ./provision/scripts/vagrant_generate.sh $(pwd) $vm_step"
	# ./provision/scripts/vagrant_generate.sh "$(pwd)" "$vm_step"
fi
