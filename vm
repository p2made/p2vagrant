#!/bin/zsh

# vm
# Updated: 2024-02-16

# Generates Vagrantfile for the step specified by an integer argument.
# &/or deletes previously generated & copied files

# Common functions
source ./provision/vm/vm_common.sh

# Source data
source ./provision/data/vm_data.sh

# Define flags
FLAG_GENERATE=false
FLAG_RESET=false

# Script variables
vm_step=0
step_title=""

# -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- /%/ -- -- #

# Function to display usage information
function display_usage() {
	script_name="$1"
	echo "Usage: $script_name [-g] [-r] <integer>"
	echo "Options:"
	echo "  -g    Generate Vagrantfile based on the specified integer."
	echo "  -r    Reset: Delete any generated or copied files from earlier Vagrant provisioning."
	echo "  <integer>   Step number for Vagrantfile generation."
	echo "--"
	echo "Usage examples:"
	echo "  $script_name -g <integer>    # Generate Vagrantfile based on the specified integer."
	echo "  $script_name -r              # Reset: Delete any generated or copied files in earlier Vagrant provisioning."
	echo "  $script_name -r <integer>    # Reset and generate Vagrantfile based on the specified integer."
	echo "  $script_name -gr <integer>   # Reset and generate Vagrantfile based on the specified integer."
	echo ""
	echo "  -g is implied any time an integer argument is given, so only serves as"
	echo "     'syntactic sugar' to make the intended use of './vm' explicitly clear."
	exit 0
}

# Process flags
while getopts ":gr" opt; do
	debug_message "Processing options"
	case $opt in
		g)
			FLAG_GENERATE=true
			;;
		r)
			FLAG_RESET=true
			;;
		\?)
			handle_error "Invalid option: -$OPTARG"
			;;
		:)
			handle_error "Option -$OPTARG requires an argument"
			;;
	esac
done

# Shift to the next argument after processing flags
shift $(( OPTIND - 1 ))

# Check if there are no flags or arguments
if (( "$#" == 0 )) && ! $FLAG_RESET && ! $FLAG_GENERATE; then
	display_usage "$0"
fi

# Check if an argument is provided
if (( $# > 0 )); then
	# Check if the argument is an integer
	if [[ $1 =~ ^[0-9]+$ ]]; then
		vm_step=$1
	else
		handle_error "$1 is not an integer"
	fi
fi

# If -r is set
if $FLAG_RESET; then
	# Calling vagrant_reset.sh
	echo "Dry run: Calling ./provision/scripts/vagrant_reset.sh $(pwd) $vm_step"
	echo "vagrant_reset.sh deletes all generated & copied files for provisioning step $vm_step"
	# ./provision/scripts/vagrant_reset.sh "$(pwd)" "$vm_step"

	announce_success "Reset complete. Generated & copied files have been deleted."

	if ! [[ "${VAGRANTFILES_INDEXES[@]}" =~ "${vm_step}" ]]; then
		# There is no Vagrantfile to be generated so we quietly exit
		exit 0
	fi
fi

# If -g is set
if $FLAG_GENERATE; then
	if ! [[ "${VAGRANTFILES_INDEXES[@]}" =~ "${vm_step}" ]]; then
		echo "No Vagrantfile to be generated for the specified step"
		exit 0
	fi

	# Calling vagrant_generate.sh
	#echo "Dry run: Calling ./provision/scripts/vagrant_generate.sh $(pwd) $vm_step"
	#echo "vagrant_generate.sh generates the Vagrantfile for provisioning step $vm_step"
	./provision/scripts/vagrant_generate.sh "$(pwd)" "$vm_step"

	announce_success "Vagrantfile for provisioning step $vm_step has been generated."
fi
